<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<bean id="customAccessDenied"
		class="com.lec.sts18_security.security.CustomAccessDeniedHandler"/>
	
	<bean id="customLoginSuccess"
		class="com.lec.sts18_security.security.CustomLoginSuccessHandler"/>
	
	<!-- <bean id="customPasswordEncoder"
		class="com.lec.sts18_security.security.CustomNoOpPasswordEncoder"/> -->
	
	<bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	
	<!-- 컨테이너의 HTTP security 요소 -->
	<security:http>
		<!-- 특정 url pattern 의 요청이 들어올때 인터셉터를 이용해 접근 제한 설정 -->
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		
		<!-- /sample/member URI 요청은 ROLE_MEMBER 라는 권한이 있는 사용자만 접근 가능 -->
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		
		<!-- /sample/admin URI 요청은 ROLE_ADMIN 라는 권한이 있는 사용자만 접근 가능 -->
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
		
		<!-- <security:form-login/> --> <!-- 스프링 기본 제공 로그인 페이지 사용 -->
		<security:form-login login-page="/customLogin"
			authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<security:logout logout-url="/customLogout" invalidate-session="true"/>
		
	</security:http>
	
	<!-- AuthenticationManager 빈 생성 -->
	<security:authentication-manager>
		<!-- UserDetailsService 사용자 인증과 권한 처리 -->
		<security:authentication-provider>
		
			<!-- InMemory 방식 
			<security:user-service>
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
			</security:user-service>
			-->
			
			<!-- JDBC 사용 -->
			<security:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query=
					"SELECT userid username, userpw password, enabled FROM tbl_member WHERE userid = ?"
				authorities-by-username-query=
					"SELECT userid username, auth authority FROM tbl_member_auth WHERE userid = ?"
			/>
			
			<!-- PasswordEncoder 설정 -->
			<!-- <security:password-encoder ref="customPasswordEncoder"/> -->
			<security:password-encoder ref="bcryptPasswordEncoder"/>
			
		</security:authentication-provider>
	
	</security:authentication-manager>	

</beans>
